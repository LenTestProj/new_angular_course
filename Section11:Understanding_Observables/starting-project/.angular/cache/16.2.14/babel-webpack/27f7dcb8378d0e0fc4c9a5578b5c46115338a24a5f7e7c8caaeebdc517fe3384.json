{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class TemperaturePipe {\n  transform(value, inputType, outputType) {\n    let val, outputTemperature, symbol;\n    if (!value) {\n      return;\n    }\n    if (typeof value === 'string') {\n      val = parseFloat(value);\n    } else {\n      val = value;\n    }\n    if (inputType === 'cel' && outputType === 'fah') {\n      outputTemperature = val * (9 / 5) + 32;\n    } else if (inputType === 'fah' && outputType === 'cel') {\n      outputTemperature = (val - 32) * (5 / 9);\n    } else {\n      outputTemperature = val;\n    }\n    if (!outputType) {\n      symbol = inputType === 'cel' ? '*C' : '*F';\n    } else {\n      symbol = inputType === 'cel' ? '*C' : '*F';\n    }\n    return `${outputTemperature} *F`;\n  }\n  static #_ = this.ɵfac = function TemperaturePipe_Factory(t) {\n    return new (t || TemperaturePipe)();\n  };\n  static #_2 = this.ɵpipe = /*@__PURE__*/i0.ɵɵdefinePipe({\n    name: \"temp\",\n    type: TemperaturePipe,\n    pure: true,\n    standalone: true\n  });\n}","map":{"version":3,"names":["TemperaturePipe","transform","value","inputType","outputType","val","outputTemperature","symbol","parseFloat","_","_2","pure","standalone"],"sources":["/home/lennon/Angular/New Tutorials/Section8:Transforming_Values_Pipes/starting-project/src/app/temperature.pipe.ts"],"sourcesContent":["import { Pipe, PipeTransform } from \"@angular/core\";\n\n@Pipe({\n    name:'temp',\n    standalone:true\n})\nexport class TemperaturePipe implements PipeTransform{\n    transform(value: string|number|null, inputType:'cel'|'fah', outputType?:'cel'|'fah') {\n        let val:number,outputTemperature!:number, symbol:'*C' | '*F';\n\n        if(!value){\n            return\n        }\n        if(typeof value === 'string'){\n            val=parseFloat(value)\n        }\n        else{\n            val=value;\n        }\n\n        if(inputType==='cel' && outputType === 'fah'){\n            outputTemperature = val * (9/5) + 32;\n        }\n        else if(inputType==='fah' && outputType === 'cel'){\n            outputTemperature = (val-32) * (5/9);   \n        }\n        else{\n            outputTemperature=val;\n        }\n        \n        if(!outputType){\n            symbol = inputType === 'cel' ? '*C':'*F'\n        }\n        else{\n            symbol = inputType === 'cel' ? '*C':'*F'\n        }\n        return `${outputTemperature} *F`;\n    }\n   \n}"],"mappings":";AAMA,OAAM,MAAOA,eAAe;EACxBC,SAASA,CAACC,KAAyB,EAAEC,SAAqB,EAAEC,UAAuB;IAC/E,IAAIC,GAAU,EAACC,iBAAyB,EAAEC,MAAkB;IAE5D,IAAG,CAACL,KAAK,EAAC;MACN;;IAEJ,IAAG,OAAOA,KAAK,KAAK,QAAQ,EAAC;MACzBG,GAAG,GAACG,UAAU,CAACN,KAAK,CAAC;KACxB,MACG;MACAG,GAAG,GAACH,KAAK;;IAGb,IAAGC,SAAS,KAAG,KAAK,IAAIC,UAAU,KAAK,KAAK,EAAC;MACzCE,iBAAiB,GAAGD,GAAG,IAAI,CAAC,GAAC,CAAC,CAAC,GAAG,EAAE;KACvC,MACI,IAAGF,SAAS,KAAG,KAAK,IAAIC,UAAU,KAAK,KAAK,EAAC;MAC9CE,iBAAiB,GAAG,CAACD,GAAG,GAAC,EAAE,KAAK,CAAC,GAAC,CAAC,CAAC;KACvC,MACG;MACAC,iBAAiB,GAACD,GAAG;;IAGzB,IAAG,CAACD,UAAU,EAAC;MACXG,MAAM,GAAGJ,SAAS,KAAK,KAAK,GAAG,IAAI,GAAC,IAAI;KAC3C,MACG;MACAI,MAAM,GAAGJ,SAAS,KAAK,KAAK,GAAG,IAAI,GAAC,IAAI;;IAE5C,OAAO,GAAGG,iBAAiB,KAAK;EACpC;EAAC,QAAAG,CAAA,G;qBA/BQT,eAAe;EAAA;EAAA,QAAAU,EAAA,G;;UAAfV,eAAe;IAAAW,IAAA;IAAAC,UAAA;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}