{"ast":null,"code":"import { Router } from \"@angular/router\";\nimport { NoTaskComponent } from \"./tasks/no-task/no-task.component\";\nimport { UserTasksComponent } from \"./users/user-tasks/user-tasks.component\";\nimport { NotFoundComponent } from \"./not-found/not-found.component\";\nimport { resolveUserName } from \"./users/users.component\";\nimport { inject } from \"@angular/core\";\nconst dummyCanMatch = (route, segments) => {\n  const router = inject(Router);\n  const shouldGetAccess = Math.random();\n  console.log(\"riute can match \", route);\n  console.log(\"Can match segment \", segments);\n  if (shouldGetAccess) {\n    return true;\n  } else {\n    return router.parseUrl('/unauthorized');\n  }\n};\nexport const routes = [{\n  path: \"\",\n  component: NoTaskComponent,\n  title: \"No task Selected\" //sets the title for the given route\n}, {\n  path: \"users/:userId\",\n  //<your-domain>/users/<uid>\n  component: UserTasksComponent,\n  loadChildren: () => import('../app/users/users.route').then(mod => mod.routes),\n  // children:userRoutes,\n  canMatch: [dummyCanMatch],\n  data: {\n    message: 'Hello!'\n  },\n  resolve: {\n    userName: resolveUserName\n  }\n}, {\n  path: '**',\n  component: NotFoundComponent\n}];","map":{"version":3,"names":["Router","NoTaskComponent","UserTasksComponent","NotFoundComponent","resolveUserName","inject","dummyCanMatch","route","segments","router","shouldGetAccess","Math","random","console","log","parseUrl","routes","path","component","title","loadChildren","then","mod","canMatch","data","message","resolve","userName"],"sources":["/home/lennon/Angular/New Tutorials/Section15:Code_Splitting_Deferrable_Views/starting-project/src/app/app.routes.ts"],"sourcesContent":["import { CanMatchFn, Router, Routes, UrlTree } from \"@angular/router\";\nimport { NoTaskComponent } from \"./tasks/no-task/no-task.component\";\nimport { UserTasksComponent } from \"./users/user-tasks/user-tasks.component\";\nimport { NotFoundComponent } from \"./not-found/not-found.component\";\nimport { resolveUserName } from \"./users/users.component\";\nimport { retry } from \"rxjs\";\nimport { inject } from \"@angular/core\";\n\nconst dummyCanMatch:CanMatchFn=(route,segments)=>{\n    const router = inject(Router);\n    const shouldGetAccess = Math.random();\n    console.log(\"riute can match \",route);\n    console.log(\"Can match segment \",segments);\n    if(shouldGetAccess){\n        return true;\n    }\n    else{\n        return router.parseUrl('/unauthorized');\n    }     \n}\n\n\nexport const routes:Routes=[\n    {\n        path:\"\", //<your-domain>\n        component:NoTaskComponent,\n        title:\"No task Selected\" //sets the title for the given route\n    },\n    {\n        path:\"users/:userId\",\n          //<your-domain>/users/<uid>\n        component:UserTasksComponent,\n        loadChildren:()=>import('../app/users/users.route').then(mod=>mod.routes),\n        // children:userRoutes,\n        canMatch:[dummyCanMatch],\n        data:{\n            message:'Hello!'\n        },\n        resolve:{\n            userName:resolveUserName   \n        },\n    },\n    {\n        path:'**', //no route is met.. default route\n        component:NotFoundComponent\n    }\n]"],"mappings":"AAAA,SAAqBA,MAAM,QAAyB,iBAAiB;AACrE,SAASC,eAAe,QAAQ,mCAAmC;AACnE,SAASC,kBAAkB,QAAQ,yCAAyC;AAC5E,SAASC,iBAAiB,QAAQ,iCAAiC;AACnE,SAASC,eAAe,QAAQ,yBAAyB;AAEzD,SAASC,MAAM,QAAQ,eAAe;AAEtC,MAAMC,aAAa,GAAYA,CAACC,KAAK,EAACC,QAAQ,KAAG;EAC7C,MAAMC,MAAM,GAAGJ,MAAM,CAACL,MAAM,CAAC;EAC7B,MAAMU,eAAe,GAAGC,IAAI,CAACC,MAAM,EAAE;EACrCC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAACP,KAAK,CAAC;EACrCM,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAACN,QAAQ,CAAC;EAC1C,IAAGE,eAAe,EAAC;IACf,OAAO,IAAI;GACd,MACG;IACA,OAAOD,MAAM,CAACM,QAAQ,CAAC,eAAe,CAAC;;AAE/C,CAAC;AAGD,OAAO,MAAMC,MAAM,GAAQ,CACvB;EACIC,IAAI,EAAC,EAAE;EACPC,SAAS,EAACjB,eAAe;EACzBkB,KAAK,EAAC,kBAAkB,CAAC;CAC5B,EACD;EACIF,IAAI,EAAC,eAAe;EAClB;EACFC,SAAS,EAAChB,kBAAkB;EAC5BkB,YAAY,EAACA,CAAA,KAAI,MAAM,CAAC,0BAA0B,CAAC,CAACC,IAAI,CAACC,GAAG,IAAEA,GAAG,CAACN,MAAM,CAAC;EACzE;EACAO,QAAQ,EAAC,CAACjB,aAAa,CAAC;EACxBkB,IAAI,EAAC;IACDC,OAAO,EAAC;GACX;EACDC,OAAO,EAAC;IACJC,QAAQ,EAACvB;;CAEhB,EACD;EACIa,IAAI,EAAC,IAAI;EACTC,SAAS,EAACf;CACb,CACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}