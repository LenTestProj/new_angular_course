{"ast":null,"code":"import { TemplateRef, ViewContainerRef, inject } from '@angular/core';\nimport { AuthService } from './auth.service';\nimport * as i0 from \"@angular/core\";\nexport class AuthDirective {\n  constructor() {\n    this.authService = inject(AuthService);\n    this.templateRef = inject(TemplateRef); //ng-template wrapper.\n    this.viewContainerRef = inject(ViewContainerRef);\n  }\n  ngOnInit() {\n    //    this.updateVisibility();\n    this.subscription = this.authService.permissionChanges.subscribe(() => {\n      this.updateVisibility();\n    });\n    // Subscribe to permission changes\n  }\n\n  updateVisibility() {\n    if (this.authService.activePermission === this.userType) {\n      this.viewContainerRef.createEmbeddedView(this.templateRef);\n    } else {\n      this.viewContainerRef.clear();\n    }\n  }\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n  static #_ = this.ɵfac = function AuthDirective_Factory(t) {\n    return new (t || AuthDirective)();\n  };\n  static #_2 = this.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: AuthDirective,\n    selectors: [[\"\", \"appAuth\", \"\"]],\n    inputs: {\n      userType: [\"appAuth\", \"userType\"]\n    },\n    standalone: true\n  });\n}","map":{"version":3,"names":["TemplateRef","ViewContainerRef","inject","AuthService","AuthDirective","constructor","authService","templateRef","viewContainerRef","ngOnInit","subscription","permissionChanges","subscribe","updateVisibility","activePermission","userType","createEmbeddedView","clear","ngOnDestroy","unsubscribe","_","_2","selectors","inputs","standalone"],"sources":["/home/lennon/Angular/New Tutorials/Section8:Transforming_Values_Pipes/starting-project/src/app/auth/auth.directive.ts"],"sourcesContent":["import { Directive, Input, OnChanges, OnDestroy, OnInit, SimpleChanges, TemplateRef, ViewContainerRef, inject } from '@angular/core';\nimport { Permission } from './auth.model';\nimport { AuthService } from './auth.service';\nimport { Subscription } from 'rxjs';\n\n@Directive({\n  selector: '[appAuth]',\n  standalone:true\n})\nexport class AuthDirective implements OnInit,OnDestroy{\n    @Input({required:true,alias:\"appAuth\"}) userType!:Permission;\n    private authService = inject(AuthService);\n    private subscription!:Subscription;\n    private templateRef = inject(TemplateRef); //ng-template wrapper.\n    private viewContainerRef = inject(ViewContainerRef);\n\n    constructor() { \n        \n    }\n\n    ngOnInit(): void {\n        //    this.updateVisibility();\n           this.subscription = this.authService.permissionChanges.subscribe(()=>{\n            this.updateVisibility();\n           })\n           // Subscribe to permission changes\n        \n    }\n\n    private updateVisibility():void{\n        if(this.authService.activePermission === this.userType){\n            this.viewContainerRef.createEmbeddedView(this.templateRef);\n        }\n        else{\n            this.viewContainerRef.clear()\n        }\n    }\n\n    ngOnDestroy(){\n        if(this.subscription){\n            this.subscription.unsubscribe();\n        }        \n    }\n}\n"],"mappings":"AAAA,SAAwEA,WAAW,EAAEC,gBAAgB,EAAEC,MAAM,QAAQ,eAAe;AAEpI,SAASC,WAAW,QAAQ,gBAAgB;;AAO5C,OAAM,MAAOC,aAAa;EAOtBC,YAAA;IALQ,KAAAC,WAAW,GAAGJ,MAAM,CAACC,WAAW,CAAC;IAEjC,KAAAI,WAAW,GAAGL,MAAM,CAACF,WAAW,CAAC,CAAC,CAAC;IACnC,KAAAQ,gBAAgB,GAAGN,MAAM,CAACD,gBAAgB,CAAC;EAInD;EAEAQ,QAAQA,CAAA;IACJ;IACG,IAAI,CAACC,YAAY,GAAG,IAAI,CAACJ,WAAW,CAACK,iBAAiB,CAACC,SAAS,CAAC,MAAI;MACpE,IAAI,CAACC,gBAAgB,EAAE;IACxB,CAAC,CAAC;IACF;EAEP;;EAEQA,gBAAgBA,CAAA;IACpB,IAAG,IAAI,CAACP,WAAW,CAACQ,gBAAgB,KAAK,IAAI,CAACC,QAAQ,EAAC;MACnD,IAAI,CAACP,gBAAgB,CAACQ,kBAAkB,CAAC,IAAI,CAACT,WAAW,CAAC;KAC7D,MACG;MACA,IAAI,CAACC,gBAAgB,CAACS,KAAK,EAAE;;EAErC;EAEAC,WAAWA,CAAA;IACP,IAAG,IAAI,CAACR,YAAY,EAAC;MACjB,IAAI,CAACA,YAAY,CAACS,WAAW,EAAE;;EAEvC;EAAC,QAAAC,CAAA,G;qBAjCQhB,aAAa;EAAA;EAAA,QAAAiB,EAAA,G;UAAbjB,aAAa;IAAAkB,SAAA;IAAAC,MAAA;MAAAR,QAAA;IAAA;IAAAS,UAAA;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}