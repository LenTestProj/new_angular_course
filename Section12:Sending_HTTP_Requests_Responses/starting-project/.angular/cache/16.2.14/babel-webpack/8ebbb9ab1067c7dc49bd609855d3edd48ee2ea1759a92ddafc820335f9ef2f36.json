{"ast":null,"code":"import { bootstrapApplication } from '@angular/platform-browser';\nimport { AppComponent } from './app/app.component';\nimport { HttpEventType, provideHttpClient, withInterceptors } from '@angular/common/http';\nimport { tap } from 'rxjs';\nfunction loggingInterceptor(request, next) {\n  const req = request.clone({\n    headers: request.headers.set(\"X_DEBUG\", \"TESTING\")\n  });\n  console.log('[Outgoing Request]');\n  console.log(req);\n  return next(req).pipe(tap({\n    next: event => {\n      if (event.type === HttpEventType.Response) {\n        console.log(\"Incoming Response\");\n        console.log(event.status);\n        console.log(event.body);\n      }\n    }\n  }));\n}\nbootstrapApplication(AppComponent, {\n  providers: [provideHttpClient(withInterceptors([loggingInterceptor]))]\n}).catch(err => console.error(err));","map":{"version":3,"names":["bootstrapApplication","AppComponent","HttpEventType","provideHttpClient","withInterceptors","tap","loggingInterceptor","request","next","req","clone","headers","set","console","log","pipe","event","type","Response","status","body","providers","catch","err","error"],"sources":["/home/lennon/Angular/New Tutorials/Section12:Sending_HTTP_Requests_Responses/starting-project/src/main.ts"],"sourcesContent":["import { bootstrapApplication } from '@angular/platform-browser';\n\nimport { AppComponent } from './app/app.component';\nimport { HttpEventType, HttpHandlerFn, HttpRequest, provideHttpClient, withInterceptors } from '@angular/common/http';\nimport { tap } from 'rxjs';\n\nfunction loggingInterceptor(request:HttpRequest<unknown>, next:HttpHandlerFn){\n    const req = request.clone({\n        headers:request.headers.set(\"X_DEBUG\",\"TESTING\")    \n    });\n    console.log('[Outgoing Request]');\n    console.log(req);\n    return next(req).pipe(tap({\n        next:event=>{\n            if(event.type===HttpEventType.Response){\n                console.log(\"Incoming Response\");\n                console.log(event.status);\n                console.log(event.body);    \n            }\n        }\n    }))\n}\n\nbootstrapApplication(AppComponent,{providers:[provideHttpClient(\n    withInterceptors([loggingInterceptor])\n)]}).catch((err) => console.error(err));\n"],"mappings":"AAAA,SAASA,oBAAoB,QAAQ,2BAA2B;AAEhE,SAASC,YAAY,QAAQ,qBAAqB;AAClD,SAASC,aAAa,EAA8BC,iBAAiB,EAAEC,gBAAgB,QAAQ,sBAAsB;AACrH,SAASC,GAAG,QAAQ,MAAM;AAE1B,SAASC,kBAAkBA,CAACC,OAA4B,EAAEC,IAAkB;EACxE,MAAMC,GAAG,GAAGF,OAAO,CAACG,KAAK,CAAC;IACtBC,OAAO,EAACJ,OAAO,CAACI,OAAO,CAACC,GAAG,CAAC,SAAS,EAAC,SAAS;GAClD,CAAC;EACFC,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;EACjCD,OAAO,CAACC,GAAG,CAACL,GAAG,CAAC;EAChB,OAAOD,IAAI,CAACC,GAAG,CAAC,CAACM,IAAI,CAACV,GAAG,CAAC;IACtBG,IAAI,EAACQ,KAAK,IAAE;MACR,IAAGA,KAAK,CAACC,IAAI,KAAGf,aAAa,CAACgB,QAAQ,EAAC;QACnCL,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;QAChCD,OAAO,CAACC,GAAG,CAACE,KAAK,CAACG,MAAM,CAAC;QACzBN,OAAO,CAACC,GAAG,CAACE,KAAK,CAACI,IAAI,CAAC;;IAE/B;GACH,CAAC,CAAC;AACP;AAEApB,oBAAoB,CAACC,YAAY,EAAC;EAACoB,SAAS,EAAC,CAAClB,iBAAiB,CAC3DC,gBAAgB,CAAC,CAACE,kBAAkB,CAAC,CAAC,CACzC;AAAC,CAAC,CAAC,CAACgB,KAAK,CAAEC,GAAG,IAAKV,OAAO,CAACW,KAAK,CAACD,GAAG,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}