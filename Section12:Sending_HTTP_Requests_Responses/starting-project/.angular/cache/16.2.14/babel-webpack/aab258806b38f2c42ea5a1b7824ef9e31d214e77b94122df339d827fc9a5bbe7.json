{"ast":null,"code":"import { signal } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nexport class PlacesService {\n  constructor() {\n    this.userPlaces = signal([]);\n    this.loadedUserPlaces = this.userPlaces.asReadonly();\n  }\n  loadAvailablePlaces() {}\n  loadUserPlaces() {}\n  addPlaceToUserPlaces(place) {}\n  removeUserPlace(place) {}\n  static #_ = this.ɵfac = function PlacesService_Factory(t) {\n    return new (t || PlacesService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PlacesService,\n    factory: PlacesService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["signal","PlacesService","constructor","userPlaces","loadedUserPlaces","asReadonly","loadAvailablePlaces","loadUserPlaces","addPlaceToUserPlaces","place","removeUserPlace","_","_2","factory","ɵfac","providedIn"],"sources":["/home/lennon/Angular/New Tutorials/Section12:Sending_HTTP_Requests_Responses/starting-project/src/app/places/places.service.ts"],"sourcesContent":["import { Injectable, signal } from '@angular/core';\n\nimport { Place } from './place.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PlacesService {\n  private userPlaces = signal<Place[]>([]);\n\n  loadedUserPlaces = this.userPlaces.asReadonly();\n\n  loadAvailablePlaces() {}\n\n  loadUserPlaces() {}\n\n  addPlaceToUserPlaces(place: Place) {}\n\n  removeUserPlace(place: Place) {}\n}\n"],"mappings":"AAAA,SAAqBA,MAAM,QAAQ,eAAe;;AAOlD,OAAM,MAAOC,aAAa;EAH1BC,YAAA;IAIU,KAAAC,UAAU,GAAGH,MAAM,CAAU,EAAE,CAAC;IAExC,KAAAI,gBAAgB,GAAG,IAAI,CAACD,UAAU,CAACE,UAAU,EAAE;;EAE/CC,mBAAmBA,CAAA,GAAI;EAEvBC,cAAcA,CAAA,GAAI;EAElBC,oBAAoBA,CAACC,KAAY,GAAG;EAEpCC,eAAeA,CAACD,KAAY,GAAG;EAAC,QAAAE,CAAA,G;qBAXrBV,aAAa;EAAA;EAAA,QAAAW,EAAA,G;WAAbX,aAAa;IAAAY,OAAA,EAAbZ,aAAa,CAAAa,IAAA;IAAAC,UAAA,EAFZ;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}