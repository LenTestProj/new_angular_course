{"ast":null,"code":"import { inject, signal } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { catchError, map, tap, throwError } from 'rxjs';\nimport { ErrorService } from '../shared/error.service';\nimport * as i0 from \"@angular/core\";\nexport class PlacesService {\n  constructor() {\n    this.errorService = inject(ErrorService);\n    this.httpClient = inject(HttpClient);\n    this.userPlaces = signal([]);\n    this.loadedUserPlaces = this.userPlaces.asReadonly();\n  }\n  loadAvailablePlaces() {\n    return this.fetchPlaces('http://localhost:3000/places', 'Something went wrong while fetching available places. Please try again later').pipe(catchError(errorResponse => {\n      this.errorService.showError(\"An error occured while fetching places\");\n      console.log(\"Error response is: \", errorResponse);\n      return throwError(() => new Error(\"An error occured while fetching places\"));\n    }));\n  }\n  loadUserPlaces() {\n    return this.fetchPlaces('http://localhost:3000/user-places', 'Something went wrong while fetching favourite places for the existing user. Please try again later').pipe(tap({\n      next: usrPlaces => {\n        usrPlaces && this.userPlaces.set(usrPlaces);\n      }\n    }));\n  }\n  addPlaceToUserPlaces(place) {\n    // const prevPlaces = this.userPlaces();\n    // this.userPlaces.set([...prevPlaces,place])\n    return this.httpClient.put('http://localhost:3000/user-places', {\n      placeId: place.id\n    }, {\n      observe: 'response'\n    }).pipe(tap(response => {\n      const _userPlaces = response.body?.userPlaces;\n      this.userPlaces.set(_userPlaces);\n    }), catchError(error => {\n      // this.userPlaces.set(prevPlaces);\n      this.errorService.showError(\"Failed to store selected Place\");\n      return throwError(() => new Error(\"Failed to store selected place.\"));\n    }));\n  }\n  removeUserPlace(place) {}\n  fetchPlaces(url, errorMessage) {\n    return this.httpClient.get(url, {\n      observe: 'response'\n    }).pipe(map(resData => {\n      console.log(\"res data is: \", resData);\n      return resData.body?.places;\n    }), catchError(error => {\n      console.log(\"catche error is: \", error);\n      return throwError(() => {\n        return new Error(errorMessage);\n      });\n    }));\n  }\n  static #_ = this.ɵfac = function PlacesService_Factory(t) {\n    return new (t || PlacesService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PlacesService,\n    factory: PlacesService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["inject","signal","HttpClient","catchError","map","tap","throwError","ErrorService","PlacesService","constructor","errorService","httpClient","userPlaces","loadedUserPlaces","asReadonly","loadAvailablePlaces","fetchPlaces","pipe","errorResponse","showError","console","log","Error","loadUserPlaces","next","usrPlaces","set","addPlaceToUserPlaces","place","put","placeId","id","observe","response","_userPlaces","body","error","removeUserPlace","url","errorMessage","get","resData","places","_","_2","factory","ɵfac","providedIn"],"sources":["/home/lennon/Angular/New Tutorials/Section12:Sending_HTTP_Requests_Responses/starting-project/src/app/places/places.service.ts"],"sourcesContent":["import { Injectable, inject, signal } from '@angular/core';\n\nimport { Place } from './place.model';\nimport { HttpClient } from '@angular/common/http';\nimport { catchError, map, tap, throwError } from 'rxjs';\nimport { ErrorService } from '../shared/error.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PlacesService {\n    private errorService = inject(ErrorService);\n    private httpClient = inject(HttpClient);\n    private userPlaces = signal<Place[]>([]);\n\n    loadedUserPlaces = this.userPlaces.asReadonly();\n\n    loadAvailablePlaces() {\n        return this.fetchPlaces('http://localhost:3000/places','Something went wrong while fetching available places. Please try again later').pipe(catchError(errorResponse=>{\n            this.errorService.showError(\"An error occured while fetching places\");\n\n            console.log(\"Error response is: \",errorResponse);\n\n            return throwError(()=>new Error(\"An error occured while fetching places\"));\n        }))    \n    }\n\n    loadUserPlaces() {\n        return this.fetchPlaces('http://localhost:3000/user-places','Something went wrong while fetching favourite places for the existing user. Please try again later').pipe(tap({\n            next:(usrPlaces)=>{\n                usrPlaces && this.userPlaces.set (usrPlaces)\n            }   \n        }))\n    }\n\n    addPlaceToUserPlaces(place:Place) {\n        // const prevPlaces = this.userPlaces();\n\n        // this.userPlaces.set([...prevPlaces,place])\n\n        return this.httpClient.put('http://localhost:3000/user-places',{placeId:place.id},{observe:'response'}).pipe(tap((response:any)=>{\n            const _userPlaces = response.body?.userPlaces;\n            this.userPlaces.set(_userPlaces);\n        }),catchError(error=>{\n            // this.userPlaces.set(prevPlaces);\n            this.errorService.showError(\"Failed to store selected Place\")\n            return throwError(()=>new Error(\"Failed to store selected place.\"))\n        }))\n    }\n\n    removeUserPlace(place: Place) {}\n\n    private fetchPlaces(url:string, errorMessage:string){\n        return this.httpClient.get<{places:Place[]}>(url,{\n                observe:'response'\n            }).pipe(\n                map((resData)=>{\n                    console.log(\"res data is: \",resData);\n                return resData.body?.places;\n                }),\n                catchError((error)=>{\n                    console.log(\"catche error is: \",error)\n                    return throwError(()=>{\n                        return new Error(errorMessage)\n                    })\n                })\n                )  \n    }\n}\n"],"mappings":"AAAA,SAAqBA,MAAM,EAAEC,MAAM,QAAQ,eAAe;AAG1D,SAASC,UAAU,QAAQ,sBAAsB;AACjD,SAASC,UAAU,EAAEC,GAAG,EAAEC,GAAG,EAAEC,UAAU,QAAQ,MAAM;AACvD,SAASC,YAAY,QAAQ,yBAAyB;;AAKtD,OAAM,MAAOC,aAAa;EAH1BC,YAAA;IAIY,KAAAC,YAAY,GAAGV,MAAM,CAACO,YAAY,CAAC;IACnC,KAAAI,UAAU,GAAGX,MAAM,CAACE,UAAU,CAAC;IAC/B,KAAAU,UAAU,GAAGX,MAAM,CAAU,EAAE,CAAC;IAExC,KAAAY,gBAAgB,GAAG,IAAI,CAACD,UAAU,CAACE,UAAU,EAAE;;EAE/CC,mBAAmBA,CAAA;IACf,OAAO,IAAI,CAACC,WAAW,CAAC,8BAA8B,EAAC,8EAA8E,CAAC,CAACC,IAAI,CAACd,UAAU,CAACe,aAAa,IAAE;MAClK,IAAI,CAACR,YAAY,CAACS,SAAS,CAAC,wCAAwC,CAAC;MAErEC,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAACH,aAAa,CAAC;MAEhD,OAAOZ,UAAU,CAAC,MAAI,IAAIgB,KAAK,CAAC,wCAAwC,CAAC,CAAC;IAC9E,CAAC,CAAC,CAAC;EACP;EAEAC,cAAcA,CAAA;IACV,OAAO,IAAI,CAACP,WAAW,CAAC,mCAAmC,EAAC,oGAAoG,CAAC,CAACC,IAAI,CAACZ,GAAG,CAAC;MACvKmB,IAAI,EAAEC,SAAS,IAAG;QACdA,SAAS,IAAI,IAAI,CAACb,UAAU,CAACc,GAAG,CAAED,SAAS,CAAC;MAChD;KACH,CAAC,CAAC;EACP;EAEAE,oBAAoBA,CAACC,KAAW;IAC5B;IAEA;IAEA,OAAO,IAAI,CAACjB,UAAU,CAACkB,GAAG,CAAC,mCAAmC,EAAC;MAACC,OAAO,EAACF,KAAK,CAACG;IAAE,CAAC,EAAC;MAACC,OAAO,EAAC;IAAU,CAAC,CAAC,CAACf,IAAI,CAACZ,GAAG,CAAE4B,QAAY,IAAG;MAC7H,MAAMC,WAAW,GAAGD,QAAQ,CAACE,IAAI,EAAEvB,UAAU;MAC7C,IAAI,CAACA,UAAU,CAACc,GAAG,CAACQ,WAAW,CAAC;IACpC,CAAC,CAAC,EAAC/B,UAAU,CAACiC,KAAK,IAAE;MACjB;MACA,IAAI,CAAC1B,YAAY,CAACS,SAAS,CAAC,gCAAgC,CAAC;MAC7D,OAAOb,UAAU,CAAC,MAAI,IAAIgB,KAAK,CAAC,iCAAiC,CAAC,CAAC;IACvE,CAAC,CAAC,CAAC;EACP;EAEAe,eAAeA,CAACT,KAAY,GAAG;EAEvBZ,WAAWA,CAACsB,GAAU,EAAEC,YAAmB;IAC/C,OAAO,IAAI,CAAC5B,UAAU,CAAC6B,GAAG,CAAmBF,GAAG,EAAC;MACzCN,OAAO,EAAC;KACX,CAAC,CAACf,IAAI,CACHb,GAAG,CAAEqC,OAAO,IAAG;MACXrB,OAAO,CAACC,GAAG,CAAC,eAAe,EAACoB,OAAO,CAAC;MACxC,OAAOA,OAAO,CAACN,IAAI,EAAEO,MAAM;IAC3B,CAAC,CAAC,EACFvC,UAAU,CAAEiC,KAAK,IAAG;MAChBhB,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAACe,KAAK,CAAC;MACtC,OAAO9B,UAAU,CAAC,MAAI;QAClB,OAAO,IAAIgB,KAAK,CAACiB,YAAY,CAAC;MAClC,CAAC,CAAC;IACN,CAAC,CAAC,CACD;EACb;EAAC,QAAAI,CAAA,G;qBAzDQnC,aAAa;EAAA;EAAA,QAAAoC,EAAA,G;WAAbpC,aAAa;IAAAqC,OAAA,EAAbrC,aAAa,CAAAsC,IAAA;IAAAC,UAAA,EAFZ;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}