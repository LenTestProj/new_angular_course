{"ast":null,"code":"import { inject, signal } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { catchError, map, tap, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class PlacesService {\n  constructor() {\n    this.httpClient = inject(HttpClient);\n    this.userPlaces = signal([]);\n    this.loadedUserPlaces = this.userPlaces.asReadonly();\n  }\n  loadAvailablePlaces() {\n    return this.fetchPlaces('http://localhost:3000/places', 'Something went wrong while fetching available places. Please try again later');\n  }\n  loadUserPlaces(place) {\n    this.userPlaces.update(prevPlaces => [...prevPlaces, place]);\n    return this.fetchPlaces('http://localhost:3000/user-places', 'Something went wrong while fetching favourite places for the existing user. Please try again later').pipe(tap({\n      next: usrPlaces => {\n        usrPlaces && this.userPlaces.set(usrPlaces);\n      }\n    }));\n  }\n  addPlaceToUserPlaces(place) {\n    return this.httpClient.put('http://localhost:3000/user-places', {\n      placeId: place.id\n    }, {\n      observe: 'response'\n    });\n  }\n  removeUserPlace(place) {}\n  fetchPlaces(url, errorMessage) {\n    return this.httpClient.get(url, {\n      observe: 'response'\n    }).pipe(map(resData => {\n      console.log(\"res data is: \", resData);\n      return resData.body?.places;\n    }), catchError(error => {\n      console.log(\"catche error is: \", error);\n      return throwError(() => {\n        return new Error(errorMessage);\n      });\n    }));\n  }\n  static #_ = this.ɵfac = function PlacesService_Factory(t) {\n    return new (t || PlacesService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PlacesService,\n    factory: PlacesService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["inject","signal","HttpClient","catchError","map","tap","throwError","PlacesService","constructor","httpClient","userPlaces","loadedUserPlaces","asReadonly","loadAvailablePlaces","fetchPlaces","loadUserPlaces","place","update","prevPlaces","pipe","next","usrPlaces","set","addPlaceToUserPlaces","put","placeId","id","observe","removeUserPlace","url","errorMessage","get","resData","console","log","body","places","error","Error","_","_2","factory","ɵfac","providedIn"],"sources":["/home/lennon/Angular/New Tutorials/Section12:Sending_HTTP_Requests_Responses/starting-project/src/app/places/places.service.ts"],"sourcesContent":["import { Injectable, inject, signal } from '@angular/core';\n\nimport { Place } from './place.model';\nimport { HttpClient } from '@angular/common/http';\nimport { catchError, map, tap, throwError } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PlacesService {\n    private httpClient = inject(HttpClient);\n    private userPlaces = signal<Place[]>([]);\n\n    loadedUserPlaces = this.userPlaces.asReadonly();\n\n    loadAvailablePlaces() {\n        return this.fetchPlaces('http://localhost:3000/places','Something went wrong while fetching available places. Please try again later')    \n    }\n\n    loadUserPlaces(place:Place) {\n        this.userPlaces.update(prevPlaces=>[...prevPlaces,place])\n\n        return this.fetchPlaces('http://localhost:3000/user-places','Something went wrong while fetching favourite places for the existing user. Please try again later').pipe(tap({\n            next:(usrPlaces)=>{\n                usrPlaces && this.userPlaces.set (usrPlaces)\n            }   \n        }))\n    }\n\n    addPlaceToUserPlaces(place:Place) {\n        return this.httpClient.put('http://localhost:3000/user-places',{placeId:place.id},{observe:'response'})\n    }\n\n    removeUserPlace(place: Place) {}\n\n    private fetchPlaces(url:string, errorMessage:string){\n        return this.httpClient.get<{places:Place[]}>(url,{\n                observe:'response'\n            }).pipe(\n                map((resData)=>{\n                    console.log(\"res data is: \",resData);\n                return resData.body?.places;\n                }),\n                catchError((error)=>{\n                    console.log(\"catche error is: \",error)\n                    return throwError(()=>{\n                        return new Error(errorMessage)\n                    })\n                })\n                )  \n    }\n}\n"],"mappings":"AAAA,SAAqBA,MAAM,EAAEC,MAAM,QAAQ,eAAe;AAG1D,SAASC,UAAU,QAAQ,sBAAsB;AACjD,SAASC,UAAU,EAAEC,GAAG,EAAEC,GAAG,EAAEC,UAAU,QAAQ,MAAM;;AAKvD,OAAM,MAAOC,aAAa;EAH1BC,YAAA;IAIY,KAAAC,UAAU,GAAGT,MAAM,CAACE,UAAU,CAAC;IAC/B,KAAAQ,UAAU,GAAGT,MAAM,CAAU,EAAE,CAAC;IAExC,KAAAU,gBAAgB,GAAG,IAAI,CAACD,UAAU,CAACE,UAAU,EAAE;;EAE/CC,mBAAmBA,CAAA;IACf,OAAO,IAAI,CAACC,WAAW,CAAC,8BAA8B,EAAC,8EAA8E,CAAC;EAC1I;EAEAC,cAAcA,CAACC,KAAW;IACtB,IAAI,CAACN,UAAU,CAACO,MAAM,CAACC,UAAU,IAAE,CAAC,GAAGA,UAAU,EAACF,KAAK,CAAC,CAAC;IAEzD,OAAO,IAAI,CAACF,WAAW,CAAC,mCAAmC,EAAC,oGAAoG,CAAC,CAACK,IAAI,CAACd,GAAG,CAAC;MACvKe,IAAI,EAAEC,SAAS,IAAG;QACdA,SAAS,IAAI,IAAI,CAACX,UAAU,CAACY,GAAG,CAAED,SAAS,CAAC;MAChD;KACH,CAAC,CAAC;EACP;EAEAE,oBAAoBA,CAACP,KAAW;IAC5B,OAAO,IAAI,CAACP,UAAU,CAACe,GAAG,CAAC,mCAAmC,EAAC;MAACC,OAAO,EAACT,KAAK,CAACU;IAAE,CAAC,EAAC;MAACC,OAAO,EAAC;IAAU,CAAC,CAAC;EAC3G;EAEAC,eAAeA,CAACZ,KAAY,GAAG;EAEvBF,WAAWA,CAACe,GAAU,EAAEC,YAAmB;IAC/C,OAAO,IAAI,CAACrB,UAAU,CAACsB,GAAG,CAAmBF,GAAG,EAAC;MACzCF,OAAO,EAAC;KACX,CAAC,CAACR,IAAI,CACHf,GAAG,CAAE4B,OAAO,IAAG;MACXC,OAAO,CAACC,GAAG,CAAC,eAAe,EAACF,OAAO,CAAC;MACxC,OAAOA,OAAO,CAACG,IAAI,EAAEC,MAAM;IAC3B,CAAC,CAAC,EACFjC,UAAU,CAAEkC,KAAK,IAAG;MAChBJ,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAACG,KAAK,CAAC;MACtC,OAAO/B,UAAU,CAAC,MAAI;QAClB,OAAO,IAAIgC,KAAK,CAACR,YAAY,CAAC;MAClC,CAAC,CAAC;IACN,CAAC,CAAC,CACD;EACb;EAAC,QAAAS,CAAA,G;qBAzCQhC,aAAa;EAAA;EAAA,QAAAiC,EAAA,G;WAAbjC,aAAa;IAAAkC,OAAA,EAAblC,aAAa,CAAAmC,IAAA;IAAAC,UAAA,EAFZ;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}