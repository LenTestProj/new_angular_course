{"ast":null,"code":"import { signal } from \"@angular/core\";\nimport * as i0 from \"@angular/core\";\nexport class TasksService {\n  constructor() {\n    this.tasks = signal([]);\n    this.allTasks = this.tasks.asReadonly();\n  }\n  addTask(taskData) {\n    const newTask = {\n      ...taskData,\n      id: Math.random().toString(),\n      status: \"OPEN\"\n    };\n    this.tasks.update(oldTasks => {\n      return [...oldTasks, newTask];\n    });\n  }\n  updateTaskStatus(taskId, newStatus) {\n    this.tasks.update(oldTasks => {\n      return oldTasks.map(task => task.id === taskId ? {\n        ...task,\n        status: newStatus\n      } : task);\n    });\n    console.log(\"this udapted tasks: \", this.tasks());\n  }\n  static #_ = this.ɵfac = function TasksService_Factory(t) {\n    return new (t || TasksService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TasksService,\n    factory: TasksService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["signal","TasksService","constructor","tasks","allTasks","asReadonly","addTask","taskData","newTask","id","Math","random","toString","status","update","oldTasks","updateTaskStatus","taskId","newStatus","map","task","console","log","_","_2","factory","ɵfac","providedIn"],"sources":["/home/lennon/Angular/New Tutorials/Section9:Understanding_Services_Dependency_Injection/starting-project/src/app/tasks/tasks.service.ts"],"sourcesContent":["import { Injectable, signal } from \"@angular/core\";\nimport { Task, TaskStatus } from \"./task.model\";\n\n@Injectable({\n    providedIn:'root'\n})\nexport class TasksService {\n    private tasks =signal<Task[]>([]);\n\n    allTasks = this.tasks.asReadonly();\n\n    addTask(taskData:{title:string; description:string}){\n        const newTask:Task={...taskData,id:Math.random().toString(),\n        status:\"OPEN\"};\n\n        this.tasks.update((oldTasks)=>{\n            return [...oldTasks,newTask]\n        })\n    }\n\n    updateTaskStatus(taskId: string, newStatus:TaskStatus){\n        this.tasks.update((oldTasks)=>{\n            return oldTasks.map((task)=>task.id===taskId?{...task,status:newStatus}:task);\n        });\n        console.log(\"this udapted tasks: \",this.tasks())\n    }\n}"],"mappings":"AAAA,SAAqBA,MAAM,QAAQ,eAAe;;AAMlD,OAAM,MAAOC,YAAY;EAHzBC,YAAA;IAIY,KAAAC,KAAK,GAAEH,MAAM,CAAS,EAAE,CAAC;IAEjC,KAAAI,QAAQ,GAAG,IAAI,CAACD,KAAK,CAACE,UAAU,EAAE;;EAElCC,OAAOA,CAACC,QAA2C;IAC/C,MAAMC,OAAO,GAAM;MAAC,GAAGD,QAAQ;MAACE,EAAE,EAACC,IAAI,CAACC,MAAM,EAAE,CAACC,QAAQ,EAAE;MAC3DC,MAAM,EAAC;IAAM,CAAC;IAEd,IAAI,CAACV,KAAK,CAACW,MAAM,CAAEC,QAAQ,IAAG;MAC1B,OAAO,CAAC,GAAGA,QAAQ,EAACP,OAAO,CAAC;IAChC,CAAC,CAAC;EACN;EAEAQ,gBAAgBA,CAACC,MAAc,EAAEC,SAAoB;IACjD,IAAI,CAACf,KAAK,CAACW,MAAM,CAAEC,QAAQ,IAAG;MAC1B,OAAOA,QAAQ,CAACI,GAAG,CAAEC,IAAI,IAAGA,IAAI,CAACX,EAAE,KAAGQ,MAAM,GAAC;QAAC,GAAGG,IAAI;QAACP,MAAM,EAACK;MAAS,CAAC,GAACE,IAAI,CAAC;IACjF,CAAC,CAAC;IACFC,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAC,IAAI,CAACnB,KAAK,EAAE,CAAC;EACpD;EAAC,QAAAoB,CAAA,G;qBAnBQtB,YAAY;EAAA;EAAA,QAAAuB,EAAA,G;WAAZvB,YAAY;IAAAwB,OAAA,EAAZxB,YAAY,CAAAyB,IAAA;IAAAC,UAAA,EAFV;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}