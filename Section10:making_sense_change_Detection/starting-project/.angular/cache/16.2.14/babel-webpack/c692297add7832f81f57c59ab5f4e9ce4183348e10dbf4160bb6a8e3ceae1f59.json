{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class TemperaturePipe {\n  transform(value) {\n    let val;\n    if (typeof value === 'string') {\n      val = parseFloat(value);\n    } else {\n      val = value;\n    }\n    const outputTemperature = val * (9 / 5) + 32;\n    return `${outputTemperature} *F`;\n  }\n  static #_ = this.ɵfac = function TemperaturePipe_Factory(t) {\n    return new (t || TemperaturePipe)();\n  };\n  static #_2 = this.ɵpipe = /*@__PURE__*/i0.ɵɵdefinePipe({\n    name: \"temp\",\n    type: TemperaturePipe,\n    pure: true,\n    standalone: true\n  });\n}","map":{"version":3,"names":["TemperaturePipe","transform","value","val","parseFloat","outputTemperature","_","_2","pure","standalone"],"sources":["/home/lennon/Angular/New Tutorials/Section8:Transforming_Values_Pipes/starting-project/src/app/temperature.pipe.ts"],"sourcesContent":["import { Pipe, PipeTransform } from \"@angular/core\";\n\n@Pipe({\n    name:'temp',\n    standalone:true\n})\nexport class TemperaturePipe implements PipeTransform{\n    transform(value: string|number) {\n        let val:number;\n        if(typeof value === 'string'){\n            val=parseFloat(value)\n        }\n        else{\n            val=value;\n        }\n\n        const outputTemperature = val * (9/5) + 32;\n        return `${outputTemperature} *F`;\n    }\n   \n}"],"mappings":";AAMA,OAAM,MAAOA,eAAe;EACxBC,SAASA,CAACC,KAAoB;IAC1B,IAAIC,GAAU;IACd,IAAG,OAAOD,KAAK,KAAK,QAAQ,EAAC;MACzBC,GAAG,GAACC,UAAU,CAACF,KAAK,CAAC;KACxB,MACG;MACAC,GAAG,GAACD,KAAK;;IAGb,MAAMG,iBAAiB,GAAGF,GAAG,IAAI,CAAC,GAAC,CAAC,CAAC,GAAG,EAAE;IAC1C,OAAO,GAAGE,iBAAiB,KAAK;EACpC;EAAC,QAAAC,CAAA,G;qBAZQN,eAAe;EAAA;EAAA,QAAAO,EAAA,G;;UAAfP,eAAe;IAAAQ,IAAA;IAAAC,UAAA;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}