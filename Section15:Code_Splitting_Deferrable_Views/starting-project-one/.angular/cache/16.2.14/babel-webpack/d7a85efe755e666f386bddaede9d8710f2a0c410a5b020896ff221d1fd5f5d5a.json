{"ast":null,"code":"import { CommonModule } from \"@angular/common\";\nimport { FormControl, FormGroup, ReactiveFormsModule, Validators } from \"@angular/forms\";\nimport { debounceTime, of } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common\";\nfunction LoginComponent_p_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 9);\n    i0.ɵɵtext(1, \"Please enter a valid email\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_p_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 9);\n    i0.ɵɵtext(1, \"Please enter a valid password (at least 6 characters long) and contain a question mark\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction mustContainQuestionMark(control) {\n  if (control.value.includes('?')) {\n    return null;\n  }\n  return {\n    doesNotContainQuestionMark: true\n  }; //just some check to know that the error exists\n}\n\nfunction emailIsUnique(control) {\n  if (control.value !== 'test@example.com') {\n    return of(null); //observable with the value null\n  }\n\n  return of({\n    notUnqiue: true\n  });\n}\nexport class LoginComponent {\n  constructor() {\n    this.form = new FormGroup({\n      email: new FormControl('', {\n        validators: [Validators.email, Validators.required],\n        asyncValidators: [emailIsUnique]\n      }),\n      password: new FormControl('', {\n        validators: [Validators.required, Validators.minLength(6), mustContainQuestionMark]\n      })\n    });\n  }\n  ngOnInit() {\n    const savedForm = window.localStorage.getItem('saved-login-form');\n    if (savedForm) {\n      const loadedForm = JSON.parse(savedForm);\n      this.form.patchValue({\n        email: loadedForm.email\n      });\n    }\n    this.subscription = this.form.valueChanges.pipe(debounceTime(500)).subscribe({\n      next: value => {\n        window.localStorage.setItem('saved-login-form', JSON.stringify({\n          email: value.email\n        }));\n      }\n    });\n  }\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n  get emailIsInvalid() {\n    return this.form.controls.email.touched && this.form.controls.email.dirty && this.form.controls.email.invalid;\n  }\n  get passwordIsInvalid() {\n    return this.form.controls.password.touched && this.form.controls.password.dirty && this.form.controls.password.invalid;\n  }\n  onSubmit() {\n    console.log(this.form);\n    const enteredEmail = this.form.value.email;\n    const enteredPassword = this.form.value.password;\n    console.log(enteredEmail, enteredPassword);\n  }\n  static #_ = this.ɵfac = function LoginComponent_Factory(t) {\n    return new (t || LoginComponent)();\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LoginComponent,\n    selectors: [[\"app-login\"]],\n    standalone: true,\n    features: [i0.ɵɵStandaloneFeature],\n    decls: 16,\n    vars: 4,\n    consts: [[3, \"formGroup\", \"ngSubmit\"], [1, \"control-row\"], [1, \"control\", \"no-margin\"], [\"for\", \"email\"], [\"id\", \"email\", \"type\", \"email\", 3, \"formControl\"], [\"for\", \"password\"], [\"id\", \"password\", \"type\", \"password\", \"formControlName\", \"password\"], [1, \"button\"], [\"class\", \"control-error\", 4, \"ngIf\"], [1, \"control-error\"]],\n    template: function LoginComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_0_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(1, \"h2\");\n        i0.ɵɵtext(2, \"Login\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 1)(4, \"div\", 2)(5, \"label\", 3);\n        i0.ɵɵtext(6, \"Email\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(7, \"input\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"div\", 2)(9, \"label\", 5);\n        i0.ɵɵtext(10, \"Password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(11, \"input\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"button\", 7);\n        i0.ɵɵtext(13, \"Login\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(14, LoginComponent_p_14_Template, 2, 0, \"p\", 8);\n        i0.ɵɵtemplate(15, LoginComponent_p_15_Template, 2, 0, \"p\", 8);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.form);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"formControl\", ctx.form.controls.email);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"ngIf\", ctx.emailIsInvalid);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.passwordIsInvalid);\n      }\n    },\n    dependencies: [ReactiveFormsModule, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormControlDirective, i1.FormGroupDirective, i1.FormControlName, CommonModule, i2.NgIf],\n    encapsulation: 2\n  });\n}","map":{"version":3,"names":["CommonModule","FormControl","FormGroup","ReactiveFormsModule","Validators","debounceTime","of","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","mustContainQuestionMark","control","value","includes","doesNotContainQuestionMark","emailIsUnique","notUnqiue","LoginComponent","constructor","form","email","validators","required","asyncValidators","password","minLength","ngOnInit","savedForm","window","localStorage","getItem","loadedForm","JSON","parse","patchValue","subscription","valueChanges","pipe","subscribe","next","setItem","stringify","ngOnDestroy","unsubscribe","emailIsInvalid","controls","touched","dirty","invalid","passwordIsInvalid","onSubmit","console","log","enteredEmail","enteredPassword","_","_2","selectors","standalone","features","ɵɵStandaloneFeature","decls","vars","consts","template","LoginComponent_Template","rf","ctx","ɵɵlistener","LoginComponent_Template_form_ngSubmit_0_listener","ɵɵelement","ɵɵtemplate","LoginComponent_p_14_Template","LoginComponent_p_15_Template","ɵɵproperty","ɵɵadvance","i1","ɵNgNoValidate","DefaultValueAccessor","NgControlStatus","NgControlStatusGroup","FormControlDirective","FormGroupDirective","FormControlName","i2","NgIf","encapsulation"],"sources":["/home/lennon/Angular/New Tutorials/Section13: Handling User Input and Forms/starting-project/src/app/auth/login-reactive/login.component.ts","/home/lennon/Angular/New Tutorials/Section13: Handling User Input and Forms/starting-project/src/app/auth/login-reactive/login.component.html"],"sourcesContent":["import { CommonModule } from \"@angular/common\";\nimport { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { AbstractControl, FormControl, FormGroup, ReactiveFormsModule, Validators } from \"@angular/forms\";\nimport { Subscription, debounceTime, of } from \"rxjs\";\n\nfunction mustContainQuestionMark(control:AbstractControl){\n    if(control.value.includes('?')){\n        return null\n    }\n    return {doesNotContainQuestionMark:true}//just some check to know that the error exists\n}\n\nfunction emailIsUnique(control:AbstractControl){\n    if(control.value !== 'test@example.com'){\n        return of(null) //observable with the value null\n    }\n    return of({notUnqiue:true});\n    \n}\n\n@Component({\n    selector:'app-login',\n    standalone:true,\n    templateUrl:'./login.component.html',\n    imports:[ReactiveFormsModule,CommonModule]\n})\nexport class LoginComponent implements OnInit,OnDestroy{\n    form = new FormGroup({\n        email:new FormControl('',{\n            validators:[Validators.email, Validators.required],\n            asyncValidators:[emailIsUnique]\n        }),\n        password:new FormControl('',{\n            validators:[Validators.required, Validators.minLength(6),mustContainQuestionMark]\n        })\n    });  \n    subscription!:Subscription;\n    \n    ngOnInit(){\n        const savedForm = window.localStorage.getItem('saved-login-form');\n        if(savedForm){\n            const loadedForm = JSON.parse(savedForm);\n            this.form.patchValue({email:loadedForm.email});\n        }\n\n\n        this.subscription = this.form.valueChanges.pipe(debounceTime(500)).subscribe({\n            next:value => {\n                window.localStorage.setItem('saved-login-form',JSON.stringify({email:value.email}));\n            }\n        })\n    }\n\n\n    ngOnDestroy(): void {\n        this.subscription.unsubscribe();\n    }\n    \n    get emailIsInvalid(){\n        return this.form.controls.email.touched && this.form.controls.email.dirty && this.form.controls.email.invalid\n    }\n\n    get passwordIsInvalid(){\n        return this.form.controls.password.touched && this.form.controls.password.dirty && this.form.controls.password.invalid\n    }\n\n    onSubmit(){\n        console.log(this.form);\n        const enteredEmail = this.form.value.email;\n        const enteredPassword = this.form.value.password;\n        console.log(enteredEmail,enteredPassword)\n    }\n}","<form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n    <h2>Login</h2>\n  \n    <div class=\"control-row\">\n        <div class=\"control no-margin\">\n            <label for=\"email\">Email</label>\n            <input id=\"email\" type=\"email\" [formControl]=\"form.controls.email\"/>\n        </div>\n  \n        <div class=\"control no-margin\">\n            <label for=\"password\">Password</label>\n            <input id=\"password\" type=\"password\" formControlName=\"password\"/>\n        </div>\n  \n        <button class=\"button\">Login</button>\n    </div>\n\n    <p *ngIf=\"emailIsInvalid\" class=\"control-error\">Please enter a valid email</p>\n\n    <p class=\"control-error\" *ngIf=\"passwordIsInvalid\">Please enter a valid password (at least 6 characters long) and contain a question mark</p>\n</form>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}