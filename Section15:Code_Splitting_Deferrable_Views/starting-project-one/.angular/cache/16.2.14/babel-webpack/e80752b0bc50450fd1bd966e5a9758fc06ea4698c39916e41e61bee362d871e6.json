{"ast":null,"code":"import { signal } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nexport class TasksService {\n  constructor() {\n    this.tasks = signal([{\n      id: 't1',\n      userId: 'u1',\n      title: 'Master Angular',\n      summary: 'Learn all the basic and advanced features of Angular & how to apply them.',\n      dueDate: '2025-12-31'\n    }, {\n      id: 't2',\n      userId: 'u3',\n      title: 'Build first prototype',\n      summary: 'Build a first prototype of the online shop website',\n      dueDate: '2024-05-31'\n    }, {\n      id: 't3',\n      userId: 'u3',\n      title: 'Prepare issue template',\n      summary: 'Prepare and describe an issue template which will help with project management',\n      dueDate: '2024-06-15'\n    }]);\n    this.allTasks = this.tasks.asReadonly();\n    const tasks = localStorage.getItem('tasks');\n    if (tasks) {\n      this.tasks.set(JSON.parse(tasks));\n    }\n  }\n  addTask(taskData, userId) {\n    this.tasks.update(prevTasks => [{\n      id: new Date().getTime().toString(),\n      userId: userId,\n      title: taskData.title,\n      summary: taskData.summary,\n      dueDate: taskData.date\n    }, ...prevTasks]);\n    this.saveTasks();\n  }\n  removeTask(id) {\n    this.tasks.update(prevTasks => prevTasks.filter(task => task.id !== id));\n    this.saveTasks();\n  }\n  saveTasks() {\n    localStorage.setItem('tasks', JSON.stringify(this.tasks()));\n  }\n  static #_ = this.ɵfac = function TasksService_Factory(t) {\n    return new (t || TasksService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TasksService,\n    factory: TasksService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["signal","TasksService","constructor","tasks","id","userId","title","summary","dueDate","allTasks","asReadonly","localStorage","getItem","set","JSON","parse","addTask","taskData","update","prevTasks","Date","getTime","toString","date","saveTasks","removeTask","filter","task","setItem","stringify","_","_2","factory","ɵfac","providedIn"],"sources":["/home/lennon/Angular/New Tutorials/Section14:Routing_Multi_Page_app/starting-project/src/app/tasks/tasks.service.ts"],"sourcesContent":["import { Injectable, signal } from '@angular/core';\n\nimport { type NewTaskData } from './task/task.model';\n\n@Injectable({ providedIn: 'root' })\nexport class TasksService {\n  private tasks = signal([\n    {\n      id: 't1',\n      userId: 'u1',\n      title: 'Master Angular',\n      summary:\n        'Learn all the basic and advanced features of Angular & how to apply them.',\n      dueDate: '2025-12-31',\n    },\n    {\n      id: 't2',\n      userId: 'u3',\n      title: 'Build first prototype',\n      summary: 'Build a first prototype of the online shop website',\n      dueDate: '2024-05-31',\n    },\n    {\n      id: 't3',\n      userId: 'u3',\n      title: 'Prepare issue template',\n      summary:\n        'Prepare and describe an issue template which will help with project management',\n      dueDate: '2024-06-15',\n    },\n  ]);\n\n  allTasks = this.tasks.asReadonly();\n\n  constructor() {\n    const tasks = localStorage.getItem('tasks');\n\n    if (tasks) {\n      this.tasks.set(JSON.parse(tasks));\n    }\n  }\n\n  addTask(taskData: NewTaskData, userId: string) {\n    this.tasks.update((prevTasks) => [\n      {\n        id: new Date().getTime().toString(),\n        userId: userId,\n        title: taskData.title,\n        summary: taskData.summary,\n        dueDate: taskData.date,\n      },\n      ...prevTasks,\n    ]);\n    this.saveTasks();\n  }\n\n  removeTask(id: string) {\n    this.tasks.update((prevTasks) =>\n      prevTasks.filter((task) => task.id !== id)\n    );\n    this.saveTasks();\n  }\n\n  private saveTasks() {\n    localStorage.setItem('tasks', JSON.stringify(this.tasks()));\n  }\n}\n"],"mappings":"AAAA,SAAqBA,MAAM,QAAQ,eAAe;;AAKlD,OAAM,MAAOC,YAAY;EA6BvBC,YAAA;IA5BQ,KAAAC,KAAK,GAAGH,MAAM,CAAC,CACrB;MACEI,EAAE,EAAE,IAAI;MACRC,MAAM,EAAE,IAAI;MACZC,KAAK,EAAE,gBAAgB;MACvBC,OAAO,EACL,2EAA2E;MAC7EC,OAAO,EAAE;KACV,EACD;MACEJ,EAAE,EAAE,IAAI;MACRC,MAAM,EAAE,IAAI;MACZC,KAAK,EAAE,uBAAuB;MAC9BC,OAAO,EAAE,oDAAoD;MAC7DC,OAAO,EAAE;KACV,EACD;MACEJ,EAAE,EAAE,IAAI;MACRC,MAAM,EAAE,IAAI;MACZC,KAAK,EAAE,wBAAwB;MAC/BC,OAAO,EACL,gFAAgF;MAClFC,OAAO,EAAE;KACV,CACF,CAAC;IAEF,KAAAC,QAAQ,GAAG,IAAI,CAACN,KAAK,CAACO,UAAU,EAAE;IAGhC,MAAMP,KAAK,GAAGQ,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAE3C,IAAIT,KAAK,EAAE;MACT,IAAI,CAACA,KAAK,CAACU,GAAG,CAACC,IAAI,CAACC,KAAK,CAACZ,KAAK,CAAC,CAAC;;EAErC;EAEAa,OAAOA,CAACC,QAAqB,EAAEZ,MAAc;IAC3C,IAAI,CAACF,KAAK,CAACe,MAAM,CAAEC,SAAS,IAAK,CAC/B;MACEf,EAAE,EAAE,IAAIgB,IAAI,EAAE,CAACC,OAAO,EAAE,CAACC,QAAQ,EAAE;MACnCjB,MAAM,EAAEA,MAAM;MACdC,KAAK,EAAEW,QAAQ,CAACX,KAAK;MACrBC,OAAO,EAAEU,QAAQ,CAACV,OAAO;MACzBC,OAAO,EAAES,QAAQ,CAACM;KACnB,EACD,GAAGJ,SAAS,CACb,CAAC;IACF,IAAI,CAACK,SAAS,EAAE;EAClB;EAEAC,UAAUA,CAACrB,EAAU;IACnB,IAAI,CAACD,KAAK,CAACe,MAAM,CAAEC,SAAS,IAC1BA,SAAS,CAACO,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACvB,EAAE,KAAKA,EAAE,CAAC,CAC3C;IACD,IAAI,CAACoB,SAAS,EAAE;EAClB;EAEQA,SAASA,CAAA;IACfb,YAAY,CAACiB,OAAO,CAAC,OAAO,EAAEd,IAAI,CAACe,SAAS,CAAC,IAAI,CAAC1B,KAAK,EAAE,CAAC,CAAC;EAC7D;EAAC,QAAA2B,CAAA,G;qBA5DU7B,YAAY;EAAA;EAAA,QAAA8B,EAAA,G;WAAZ9B,YAAY;IAAA+B,OAAA,EAAZ/B,YAAY,CAAAgC,IAAA;IAAAC,UAAA,EADC;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}