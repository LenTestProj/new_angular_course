{"ast":null,"code":"import { DestroyRef, inject, signal } from '@angular/core';\nimport { toObservable } from '@angular/core/rxjs-interop';\nimport * as i0 from \"@angular/core\";\nexport class AppComponent {\n  constructor() {\n    //this function gets called whenever any signal value changes\n    // effect(()=>{\n    //     console.log(`Clicked button ${this.clickCount()} times`)\n    // })\n    this.clickCount = signal(0);\n    this.clickCount$ = toObservable(this.clickCount); //used to convert signal to observable\n    // interval = signal(0);\n    // doubleInterval = computed(()=>this.interval()*2);\n    this.destroyRef = inject(DestroyRef);\n  }\n  ngOnInit() {\n    // setInterval(()=>{\n    //     this.interval.update(prevIntervalNumber=>prevIntervalNumber+1);\n    // },1000)\n    // const subscription = interval(1000).pipe(map((val:number)=>val*2)).subscribe({\n    //     next:(val)=>{\n    //         console.log(val);\n    //     }\n    // }); \n    // //this function gets called when the component is destroyed\n    // this.destroyRef.onDestroy(()=>{\n    //     subscription.unsubscribe();\n    // }) \n    this.clickCount$.subscribe({\n      next: val => {\n        console.log(`Clicked button ${this.clickCount()} times`);\n      }\n    });\n  }\n  onClick() {\n    this.clickCount.update(prevCount => prevCount + 1);\n  }\n  static #_ = this.ɵfac = function AppComponent_Factory(t) {\n    return new (t || AppComponent)();\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AppComponent,\n    selectors: [[\"app-root\"]],\n    standalone: true,\n    features: [i0.ɵɵStandaloneFeature],\n    decls: 10,\n    vars: 1,\n    consts: [[\"src\", \"rxjs-logo.png\", \"alt\", \"The RxJS logo\"], [3, \"click\"]],\n    template: function AppComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"img\", 0);\n        i0.ɵɵelementStart(1, \"h1\");\n        i0.ɵɵtext(2, \"Understanding RxJS & Observables\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"p\");\n        i0.ɵɵtext(4, \"Working with \\\"Streams of Data\\\".\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"p\")(6, \"button\", 1);\n        i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_6_listener() {\n          return ctx.onClick();\n        });\n        i0.ɵɵtext(7, \"Click\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(8, \"p\");\n        i0.ɵɵtext(9);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(9);\n        i0.ɵɵtextInterpolate1(\" \", ctx.clickCount(), \"\\n\");\n      }\n    },\n    encapsulation: 2\n  });\n}","map":{"version":3,"names":["DestroyRef","inject","signal","toObservable","AppComponent","constructor","clickCount","clickCount$","destroyRef","ngOnInit","subscribe","next","val","console","log","onClick","update","prevCount","_","_2","selectors","standalone","features","i0","ɵɵStandaloneFeature","decls","vars","consts","template","AppComponent_Template","rf","ctx","ɵɵelement","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","AppComponent_Template_button_click_6_listener","ɵɵadvance","ɵɵtextInterpolate1"],"sources":["/home/lennon/Angular/New Tutorials/Section11:Understanding_Observables/starting-project/src/app/app.component.ts","/home/lennon/Angular/New Tutorials/Section11:Understanding_Observables/starting-project/src/app/app.component.html"],"sourcesContent":["import { Component, DestroyRef, OnInit, computed, effect, inject, signal } from '@angular/core';\nimport {interval, map} from 'rxjs';\nimport {toObservable} from '@angular/core/rxjs-interop'\n\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  templateUrl: './app.component.html'\n})\nexport class AppComponent implements OnInit{\n    clickCount = signal(0);\n    clickCount$ = toObservable(this.clickCount);//used to convert signal to observable\n    // interval = signal(0);\n    // doubleInterval = computed(()=>this.interval()*2);\n    private destroyRef = inject(DestroyRef);\n\n    constructor(){\n        //this function gets called whenever any signal value changes\n        // effect(()=>{\n        //     console.log(`Clicked button ${this.clickCount()} times`)\n        // })\n\n        \n    }\n\n    ngOnInit(): void {\n        // setInterval(()=>{\n        //     this.interval.update(prevIntervalNumber=>prevIntervalNumber+1);\n        // },1000)\n        // const subscription = interval(1000).pipe(map((val:number)=>val*2)).subscribe({\n        //     next:(val)=>{\n        //         console.log(val);\n        //     }\n        // }); \n\n        // //this function gets called when the component is destroyed\n        // this.destroyRef.onDestroy(()=>{\n        //     subscription.unsubscribe();\n        // }) \n        this.clickCount$.subscribe({\n            next:(val)=>{\n                console.log(`Clicked button ${this.clickCount()} times`)    \n            }\n        })  \n    }\n\n    onClick(){\n        this.clickCount.update(prevCount=>prevCount+1);\n    }\n}\n","<img src=\"rxjs-logo.png\" alt=\"The RxJS logo\" />\n<h1>Understanding RxJS & Observables</h1>\n<p>Working with \"Streams of Data\".</p>\n\n<p>\n  <button (click)=\"onClick()\">Click</button>\n</p>\n\n<p>\n    {{clickCount()}}\n</p>\n"],"mappings":"AAAA,SAAoBA,UAAU,EAA4BC,MAAM,EAAEC,MAAM,QAAQ,eAAe;AAE/F,SAAQC,YAAY,QAAO,4BAA4B;;AAOvD,OAAM,MAAOC,YAAY;EAOrBC,YAAA;IACI;IACA;IACA;IACA;IAVJ,KAAAC,UAAU,GAAGJ,MAAM,CAAC,CAAC,CAAC;IACtB,KAAAK,WAAW,GAAGJ,YAAY,CAAC,IAAI,CAACG,UAAU,CAAC,CAAC;IAC5C;IACA;IACQ,KAAAE,UAAU,GAAGP,MAAM,CAACD,UAAU,CAAC;EASvC;EAEAS,QAAQA,CAAA;IACJ;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA,IAAI,CAACF,WAAW,CAACG,SAAS,CAAC;MACvBC,IAAI,EAAEC,GAAG,IAAG;QACRC,OAAO,CAACC,GAAG,CAAC,kBAAkB,IAAI,CAACR,UAAU,EAAE,QAAQ,CAAC;MAC5D;KACH,CAAC;EACN;EAEAS,OAAOA,CAAA;IACH,IAAI,CAACT,UAAU,CAACU,MAAM,CAACC,SAAS,IAAEA,SAAS,GAAC,CAAC,CAAC;EAClD;EAAC,QAAAC,CAAA,G;qBAvCQd,YAAY;EAAA;EAAA,QAAAe,EAAA,G;UAAZf,YAAY;IAAAgB,SAAA;IAAAC,UAAA;IAAAC,QAAA,GAAAC,EAAA,CAAAC,mBAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,sBAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCTzBP,EAAA,CAAAS,SAAA,aAA+C;QAC/CT,EAAA,CAAAU,cAAA,SAAI;QAAAV,EAAA,CAAAW,MAAA,uCAAgC;QAAAX,EAAA,CAAAY,YAAA,EAAK;QACzCZ,EAAA,CAAAU,cAAA,QAAG;QAAAV,EAAA,CAAAW,MAAA,wCAA+B;QAAAX,EAAA,CAAAY,YAAA,EAAI;QAEtCZ,EAAA,CAAAU,cAAA,QAAG;QACOV,EAAA,CAAAa,UAAA,mBAAAC,8CAAA;UAAA,OAASN,GAAA,CAAAhB,OAAA,EAAS;QAAA,EAAC;QAACQ,EAAA,CAAAW,MAAA,YAAK;QAAAX,EAAA,CAAAY,YAAA,EAAS;QAG5CZ,EAAA,CAAAU,cAAA,QAAG;QACCV,EAAA,CAAAW,MAAA,GACJ;QAAAX,EAAA,CAAAY,YAAA,EAAI;;;QADAZ,EAAA,CAAAe,SAAA,GACJ;QADIf,EAAA,CAAAgB,kBAAA,MAAAR,GAAA,CAAAzB,UAAA,SACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}