{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class SortPipe {\n  transform(value, direction = 'asc') {\n    const sorted = [...value];\n    sorted.sort((a, b) => {\n      if (direction === 'asc') {\n        return a > b ? 1 : -1;\n      } else {\n        return a > b ? -1 : 1;\n      }\n    });\n    return sorted;\n  }\n  static #_ = this.ɵfac = function SortPipe_Factory(t) {\n    return new (t || SortPipe)();\n  };\n  static #_2 = this.ɵpipe = /*@__PURE__*/i0.ɵɵdefinePipe({\n    name: \"sort\",\n    type: SortPipe,\n    pure: true,\n    standalone: true\n  });\n}","map":{"version":3,"names":["SortPipe","transform","value","direction","sorted","sort","a","b","_","_2","pure","standalone"],"sources":["/home/lennon/Angular/New Tutorials/Section8:Transforming_Values_Pipes/starting-project/src/app/sort.pipe.ts"],"sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'sort',\n  standalone:true\n})\nexport class SortPipe implements PipeTransform {\n\n  transform(value: string[]|number[],direction:'asc'|'dsc' = 'asc') {\n    const sorted = [...value];\n    sorted.sort((a,b)=>{\n        if(direction==='asc'){\n            return a>b?1:-1\n        }\n        else{\n            return a>b?-1:1\n        }\n    });\n    return sorted;\n  }\n\n}\n"],"mappings":";AAMA,OAAM,MAAOA,QAAQ;EAEnBC,SAASA,CAACC,KAAwB,EAACC,SAAA,GAAwB,KAAK;IAC9D,MAAMC,MAAM,GAAG,CAAC,GAAGF,KAAK,CAAC;IACzBE,MAAM,CAACC,IAAI,CAAC,CAACC,CAAC,EAACC,CAAC,KAAG;MACf,IAAGJ,SAAS,KAAG,KAAK,EAAC;QACjB,OAAOG,CAAC,GAACC,CAAC,GAAC,CAAC,GAAC,CAAC,CAAC;OAClB,MACG;QACA,OAAOD,CAAC,GAACC,CAAC,GAAC,CAAC,CAAC,GAAC,CAAC;;IAEvB,CAAC,CAAC;IACF,OAAOH,MAAM;EACf;EAAC,QAAAI,CAAA,G;qBAbUR,QAAQ;EAAA;EAAA,QAAAS,EAAA,G;;UAART,QAAQ;IAAAU,IAAA;IAAAC,UAAA;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}